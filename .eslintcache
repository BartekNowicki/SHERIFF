[{"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\index.tsx":"1","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\reportWebVitals.ts":"2","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\App.tsx":"3","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\Sheriff.tsx":"4","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\Bullet.tsx":"5","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\panel.tsx":"6","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\Panel.tsx":"7","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\TargetArea.tsx":"8","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\assets\\targets\\_targetList.tsx":"9","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\SoundToggle.tsx":"10","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\Intro.tsx":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":2591,"mtime":1610646315038,"results":"15","hashOfConfig":"13"},{"size":16249,"mtime":1610649202935,"results":"16","hashOfConfig":"13"},{"size":797,"mtime":1610209602313,"results":"17","hashOfConfig":"13"},{"size":231,"mtime":1610138378970,"results":"18","hashOfConfig":"13"},{"size":524,"mtime":1610558963216,"results":"19","hashOfConfig":"13"},{"size":7517,"mtime":1610565249548,"results":"20","hashOfConfig":"13"},{"size":1592,"mtime":1610207442469,"results":"21","hashOfConfig":"13"},{"size":440,"mtime":1610560026245,"results":"22","hashOfConfig":"13"},{"size":256,"mtime":1610634387693,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"gf4skb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\index.tsx",[],["50","51"],"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\reportWebVitals.ts",[],"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\App.tsx",[],"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\Sheriff.tsx",["52"],"import gsap from 'gsap';\r\nimport React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { AppStorage } from \"../App\";\r\nimport { ReactComponent as PlaneSvgComponent } from \"../assets/plane.svg\";\r\nimport { Bullet } from './Bullet';\r\nimport './bullet.scss';\r\n\r\nexport const Sheriff: React.FC<{\r\n    status: number, \r\n    wrapperWidth: number}> = ({status, wrapperWidth})  => {\r\n\r\n    const [sheriffClickCount, setSheriffClickCount] = useState<number>(status);\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const { targetDescription, score, setScore, isSound } = useContext(AppStorage);\r\n    // console.log('TARGET DESCRIPTION1: ', targetDescription);\r\n\r\n    const data = useRef({\r\n        boardWidth: 0, \r\n        boardHeight: 0, \r\n        sheriffWidth: 0, \r\n        deltaIncrement: 0,\r\n        deltaX: 0, \r\n        maxDeltaX: 0, \r\n        bulletCount: 0, \r\n        inMotionLeft: false, \r\n        inMotionRight: false,\r\n        isCorrectShot: false,\r\n        targetDescriptionFromStore: '',\r\n        score: 0,\r\n        goodShotSoundPath: null,\r\n        badShotSoundPath: null,\r\n        isSoundFromStore: false,\r\n        targetsDown : [0,0,0],\r\n        touchInitialX: -1,\r\n        touchFinalX: -1,\r\n        swipeThrottled: false,\r\n        });\r\n    \r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [canMove, setcanMove] = useState<string>('canMoveOn');\r\n    //canMoveOf will disable moving - not used yet, only set up in key press handler\r\n\r\n    const [bulletsArray, setBulletsArray] = useState<Array<JSX.Element>>([]);\r\n    const bulletsRefs = useRef<Array<JSX.Element>>(bulletsArray);\r\n    \r\n    const getDimentions = (selector: string) => {\r\n        const el = document.querySelector(selector);\r\n        if (!el) {\r\n            throw new Error('ERROR READING ELEMENT!');\r\n        }\r\n        // console.log('HERE IS THE WIDTH: ', el.getBoundingClientRect().width);\r\n        return {width: el.getBoundingClientRect().width, height: el.getBoundingClientRect().height};     \r\n    }\r\n    \r\n    const getClassNames = (selector: string) => {\r\n        const el = document.querySelector(selector);\r\n        if (!el) {\r\n            throw new Error('ERROR READING ELEMENT!');\r\n        }\r\n        return el.className;   \r\n    }\r\n\r\n    const bulletTimeline = (): gsap.core.Timeline => gsap.timeline({ paused: false, ease: \"none\" });\r\n    const sherrifTimeline = (): gsap.core.Timeline => gsap.timeline({ paused: true, ease: \"none\" });\r\n    const hitTargetTimeline = (): gsap.core.Timeline => gsap.timeline({ paused: true, ease: \"none\" });\r\n\r\n    const tlLeft = sherrifTimeline();\r\n    const tlRight = sherrifTimeline();\r\n\r\n    const setCssVariables = (value: number) => {\r\n        document.documentElement.style.setProperty('--targetWidthFromJs', `${value / 4}px`);\r\n        // console.log('targetWidthFromJs: ', getComputedStyle(document.documentElement).getPropertyValue('--targetWidthFromJs'));\r\n    }\r\n\r\n    const performMeasurements = () => {\r\n        //QUERYSELECTOR IS NOT REALLY REQUIRED AS THE BOARD INLINE STYLE IS 98% OFWRAPPER :)      \r\n        if (document.querySelector('.board')) {\r\n            const boardWidth = Math.round(getDimentions('.board').width);\r\n            data.current.boardWidth = boardWidth;\r\n            const boardHeight = Math.round(getDimentions('.board').height);\r\n            data.current.boardHeight = boardHeight;\r\n            const sheriffWidth = Math.round(boardWidth / 4);\r\n            data.current.sheriffWidth = sheriffWidth;\r\n            const deltaIncrement = sheriffWidth / 8;\r\n            data.current.deltaIncrement = deltaIncrement;\r\n            const maxDeltaX = Math.round(boardWidth / 2 - sheriffWidth / 2);\r\n            data.current.maxDeltaX = maxDeltaX;\r\n            setCssVariables(boardWidth);\r\n        } else {\r\n            console.warn('BOARD NOT DETECTED!');\r\n        }        \r\n    }\r\n\r\n    const clearSheriffMotion = () => {\r\n        data.current.inMotionLeft = false;\r\n        data.current.inMotionRight = false;\r\n    }\r\n    \r\n    const move = (direction: string, increment: number) => {\r\n     \r\n        clearSheriffMotion();    \r\n        direction === 'left'\r\n        ? data.current.inMotionLeft = true\r\n        : data.current.inMotionRight = true;\r\n        // console.log('LEFT: ', data.current.inMotionLeft, 'RIGHT', data.current.inMotionRight);\r\n        // console.log('MOVING: ', sherriffRef);\r\n        \r\n        const el = sherriffRef;\r\n        \r\n        if (el) {\r\n            if(data.current.inMotionLeft) {\r\n                \r\n                tlLeft.play();\r\n                // console.log('DELTA X: ', data.current.deltaX);\r\n                const newDeltaX = Math.max(data.current.deltaX - data.current.deltaIncrement, -data.current.maxDeltaX);\r\n                tlLeft.fromTo(el, {x: data.current.deltaX}, {x: newDeltaX, duration: 0.1, onComplete: () => { \r\n                // console.log('DONE MOVING LEFT');                \r\n                data.current.deltaX = newDeltaX;\r\n                // console.log('NEW DELTA X: ', data.current.deltaX, data.current.maxDeltaX);\r\n                    //MOVE LEFT AGAIN\r\n                    if (data.current.inMotionLeft && Math.abs(data.current.deltaX) < Math.abs(data.current.maxDeltaX)) {\r\n                        move('left', data.current.deltaIncrement);\r\n                    }\r\n\r\n                }}).delay(0);\r\n            } else if(data.current.inMotionRight) {\r\n                tlRight.play();\r\n                // console.log('DELTA X: ', data.current.deltaX);\r\n                const newDeltaX = Math.min(data.current.deltaX + data.current.deltaIncrement, data.current.maxDeltaX);\r\n                tlRight.fromTo(el, {x: data.current.deltaX}, {x: newDeltaX, duration: 0.1, onComplete: () => { \r\n                // console.log('DONE MOVING RIGHT');                \r\n                data.current.deltaX = newDeltaX;\r\n                // console.log('NEW DELTA X: ', data.current.deltaX);\r\n                    //MOVE RIGHT AGAIN\r\n                    if (data.current.inMotionRight && Math.abs(data.current.deltaX) < Math.abs(data.current.maxDeltaX)) {\r\n                        move('right', data.current.deltaIncrement);\r\n                    }\r\n                }}).delay(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    const calculateBulletRange = () => {    \r\n        const panel = document.querySelector(\"[data-name='panel']\");\r\n        const targetArea = document.querySelector(\"[data-name='targetArea']\");\r\n        if (panel && targetArea) {\r\n            const panelHeight = parseInt(window.getComputedStyle(panel).height);\r\n            const targetAreaHeight = parseInt(window.getComputedStyle(targetArea).height);\r\n            const bulletFlightRange = data.current.boardHeight - panelHeight - targetAreaHeight;\r\n            // console.log('BULLET RANGE: ', bulletFlightRange);\r\n            return bulletFlightRange;\r\n        } \r\n    }\r\n\r\n    const animateGoodShot = (targetHit: HTMLDivElement) => {\r\n        const tl = hitTargetTimeline();\r\n        tl.to(targetHit, {scale: 0, duration: 0.5, onComplete: () => { }}).delay(0.5);\r\n        tl.play();\r\n    }\r\n\r\n    const animateBadShot = (targetHit: HTMLDivElement, cycles = 21, counter = 0) => {\r\n        //IF MODULO IS 4 THEN CYCLES MUST BE AN ODD NUMBER FOR THE TOGGLE TO LEAVE OFF AT REMOVE\r\n        if (!!cycles) {\r\n            window.requestAnimationFrame(() => animateBadShot(targetHit, --cycles, ++counter));\r\n        }\r\n        if (counter % 4 === 0) {\r\n            targetHit.classList.toggle('hit');\r\n            // console.log('tick');\r\n        }\r\n        // console.log(cycles, counter);\r\n    }\r\n\r\n    const playGoodSound = (path: any ) => {\r\n        if (path) {\r\n            if (path.default) {\r\n                const audio = new Audio(path.default);\r\n                audio.play();\r\n            }\r\n        }        \r\n    };\r\n\r\n    const playBadSound = (path: any ) => {\r\n        if (path) {\r\n            if (path.default) {\r\n                const audio = new Audio(path.default);\r\n                audio.play();\r\n            }\r\n        }        \r\n    };\r\n\r\n    const updateShotTargetsArray = (side: string) => {\r\n        if (side === 'left') {\r\n            data.current.targetsDown[0] = 1;\r\n        } else if (side === 'right') {\r\n            data.current.targetsDown[2] = 1;\r\n        } else {\r\n            data.current.targetsDown[1] = 1;\r\n        }\r\n    }\r\n\r\n    const checkBulletHitAndAnimate = (side: string) => {\r\n        if(side === 'left' && data.current.targetsDown[0]) return\r\n        if(side === 'center' && data.current.targetsDown[1]) return\r\n        if(side === 'right' && data.current.targetsDown[2]) return\r\n\r\n        let targetHit: any;\r\n        if (document.querySelector(`[data-position='${side}']`)) {\r\n            targetHit = document.querySelector(`[data-position='${side}']`);            \r\n            // console.log('TARGET CLASSLIST: ', targetHit.classList.toString());\r\n            // console.log('TARGET DATASET: ', targetHit.dataset);\r\n            // console.log('TARGET DATASET-NAME: ', targetHit.dataset.name.toString());\r\n            const hitItemCharacteristics: string = targetHit.classList.toString() + ' ' + targetHit.dataset.name.toString();\r\n            if (hitItemCharacteristics.includes(data.current.targetDescriptionFromStore)) {\r\n                data.current.isSoundFromStore && playGoodSound(data.current.goodShotSoundPath);\r\n                animateGoodShot(targetHit);\r\n                data.current.score = data.current.score + 1;\r\n                setScore(data.current.score);\r\n                updateShotTargetsArray(side);\r\n            } else {\r\n                data.current.isSoundFromStore && playBadSound(data.current.badShotSoundPath);\r\n                animateBadShot(targetHit);\r\n                data.current.score = Math.max(0, data.current.score - 2);\r\n                setScore(data.current.score);\r\n            }          \r\n        }        \r\n    }    \r\n    \r\n    const animateBullet = (el: HTMLDivElement) => {\r\n        const sixth = data.current.maxDeltaX / 3;\r\n        let side: string;\r\n        let leftSidePoint = -(data.current.maxDeltaX - sixth * 2);\r\n        let rightSidePoint = (data.current.maxDeltaX - sixth * 2);\r\n        // console.log(leftSidePoint, rightSidePoint, data.current.maxDeltaX);\r\n        if (data.current.deltaX < leftSidePoint) {\r\n            side = 'left';\r\n        } else if (data.current.deltaX > rightSidePoint) {\r\n            side = 'right';\r\n        } else {\r\n            side = 'center';\r\n        }\r\n            \r\n        const tl = bulletTimeline();\r\n        tl.set(el,  {transformOrigin: '50% 0%', x: data.current.deltaX});\r\n        tl.to(el, {opacity: 1, duration: 0}).delay(0.3);\r\n        tl.to(el, {bottom: calculateBulletRange(), duration: 0.3, onComplete: () => {\r\n            checkBulletHitAndAnimate(side);\r\n            bulletsRefs.current.shift();\r\n            setBulletsArray([...bulletsRefs.current]);\r\n         }}).delay(0);\r\n    }\r\n\r\n    const getDomNodeFromChild = (el: HTMLDivElement | null): void => {\r\n        // console.log('SHERRIF RECEIVED BULLET NODE: ', el);\r\n        if (el) {\r\n            if (el.dataset.type === 'bullet') {\r\n                animateBullet(el);\r\n            }\r\n        }\r\n    }\r\n\r\n    const shoot = () => {        \r\n        data.current.bulletCount = data.current.bulletCount + 1;        \r\n        const newBullet = <Bullet key = {data.current.bulletCount} nr = {data.current.bulletCount} sheriffWidth = {data.current.sheriffWidth} domNodeGetter = {getDomNodeFromChild}/>\r\n        bulletsRefs.current.push(newBullet);\r\n        // console.log('BULLETSREF: ', bulletsRefs.current);\r\n        setBulletsArray([...bulletsRefs.current]);\r\n        // console.log('BULLETS ARRAY AFTER NEW BULLET: ', bulletsArray);\r\n        // console.log('BULLET COUNT: ', data.current.bulletCount);\r\n    }\r\n    \r\n    const handleKeyPress = (e: KeyboardEvent) => {        \r\n        // console.log('CLASSNAME INSIDE HANDLER: ', getClassNames('.sheriffDiv'));\r\n        if (getClassNames('.sheriffDiv').includes('canMoveOff')) return\r\n\r\n        const { key } = e;  //instead of e.key\r\n        // console.log('key: ', key);        \r\n            switch (key) {\r\n                case 'ArrowLeft':\r\n                    if (tlLeft.isActive() === false) {\r\n                        move('left', data.current.deltaIncrement);\r\n                    }\r\n                break;\r\n                case 'ArrowRight':\r\n                    if (tlRight.isActive() === false) {\r\n                        move('right', data.current.deltaIncrement);\r\n                    }\r\n                break;\r\n                case ' ': //SPACE BAR\r\n                    shoot(); \r\n                break;\r\n                      \r\n                default:\r\n                  console.log(`PRESS A FUNCTION KEY INSTEAD OF: ${key}...`);\r\n              }      \r\n    };\r\n\r\n    const addSounds = () => {\r\n        data.current.goodShotSoundPath = require('../assets/goodShot.mp3');\r\n        data.current.badShotSoundPath = require('../assets/badShot.mp3');\r\n        console.log('SOUND ADDED');\r\n    }\r\n\r\n    const startTouch = (e: TouchEvent) => {\r\n        // e.preventDefault(); -- TO MUCH LOAD ON PERFORMANCE, USED THROTTLING INSTEAD\r\n        data.current.touchInitialX = e.touches[0].clientX;\r\n    }\r\n\r\n    const moveTouch = (e: TouchEvent) => {\r\n        if (data.current.swipeThrottled) return\r\n        if (data.current.touchInitialX === -1) return\r\n        data.current.touchFinalX = e.touches[0].clientX;\r\n        \r\n        if (data.current.touchFinalX - data.current.touchInitialX > 0) {\r\n            data.current.swipeThrottled = true;\r\n            if (tlRight.isActive() === false) {\r\n                move('right', data.current.deltaIncrement);\r\n            }\r\n            setTimeout(()=> data.current.swipeThrottled = false, 500);\r\n        } else if (data.current.touchFinalX - data.current.touchInitialX < -0) {\r\n            data.current.swipeThrottled = true;\r\n            if (tlLeft.isActive() === false) {\r\n                move('left', data.current.deltaIncrement);\r\n            }\r\n            data.current.swipeThrottled = true;\r\n            setTimeout(()=> data.current.swipeThrottled = false, 500);\r\n        }\r\n    };\r\n\r\n    const addEventListeners = () => {\r\n        document.addEventListener('touchstart', (e) => startTouch(e));\r\n        document.addEventListener('touchmove', (e) => moveTouch(e));\r\n        window.addEventListener('keyup', (e) => handleKeyPress(e));\r\n    }\r\n\r\n    useEffect(() => {        \r\n        addEventListeners();        \r\n        performMeasurements();\r\n        addSounds();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);    \r\n\r\n    const handleClick = () => {\r\n        setSheriffClickCount(sheriffClickCount => sheriffClickCount + 1);\r\n        shoot();\r\n        // console.log(`SHERIFF CLICKED, INCREASING CLICK COUNT TO: ${sheriffClickCount}`);\r\n\r\n    }   \r\n\r\n    const sheriffStyle = {\r\n        // transform: `translateX(${deltaX}px)`,\r\n        width: `${data.current.sheriffWidth}px`,\r\n        height: `${data.current.sheriffWidth}px`,\r\n        padding: `1px`,\r\n    };\r\n    \r\n    const sheriffClassNames = ['sheriffDiv', `${canMove}`];\r\n\r\n    let sherriffRef: HTMLDivElement | null;\r\n    const rememberMyRef = (myRef: HTMLDivElement | null) => {\r\n        if (myRef) {\r\n            sherriffRef = myRef;\r\n            // console.log('MY REF IS: ', sherriffRef);\r\n        } \r\n    }\r\n    \r\n    useEffect(() => {        \r\n        // console.log('SHERIFF SEES TARGET DESCRIPTION CHANGE!!!');\r\n        data.current.targetDescriptionFromStore = targetDescription;\r\n        data.current.targetsDown = [0, 0, 0];\r\n    }, [targetDescription]);\r\n\r\n    useEffect(() => {        \r\n        // console.log('SHERIFF SEES SOUND TOGGLE!!!');\r\n        data.current.isSoundFromStore = isSound;\r\n    }, [isSound]);\r\n\r\n\r\n    return (\r\n        <>\r\n        {console.log('SHERIFF RENDERED')}\r\n        {bulletsArray}\r\n        <div ref={element => {rememberMyRef(element)}} \r\n            className={sheriffClassNames.join(' ')} \r\n            style = {sheriffStyle} \r\n            onClick = {() => handleClick()}> \r\n        <PlaneSvgComponent className=\"planeSvg\"/>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\Bullet.tsx",[],"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\panel.tsx",[],"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\Panel.tsx",[],"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\TargetArea.tsx",["53"],"import { useContext, useEffect, useState } from 'react';\r\nimport { AppStorage } from \"../App\";\r\n\r\nimport { targets } from '../assets/targets/_targetList';\r\nimport { ReactComponent as AppleSvgComponent } from \"../assets/targets/apple.svg\";\r\nimport { ReactComponent as BananaSvgComponent } from \"../assets/targets/banana.svg\";\r\nimport { ReactComponent as BeanSvgComponent } from \"../assets/targets/bean.svg\";\r\nimport { ReactComponent as BeetSvgComponent } from \"../assets/targets/beet.svg\";\r\nimport { ReactComponent as BlueberrySvgComponent } from \"../assets/targets/blueberry.svg\";\r\nimport { ReactComponent as BroccoliSvgComponent } from \"../assets/targets/broccoli.svg\";\r\nimport { ReactComponent as CabbageSvgComponent } from \"../assets/targets/cabbage.svg\";\r\nimport { ReactComponent as CarrotSvgComponent } from \"../assets/targets/carrot.svg\";\r\nimport { ReactComponent as CherrySvgComponent } from \"../assets/targets/cherry.svg\";\r\nimport { ReactComponent as CoconutSvgComponent } from \"../assets/targets/coconut.svg\";\r\nimport { ReactComponent as CornSvgComponent } from \"../assets/targets/corn.svg\";\r\nimport { ReactComponent as CucumberSvgComponent } from \"../assets/targets/cucumber.svg\";\r\nimport { ReactComponent as EggplantSvgComponent } from \"../assets/targets/eggplant.svg\";\r\nimport { ReactComponent as GarlicSvgComponent } from \"../assets/targets/garlic.svg\";\r\nimport { ReactComponent as GrapesSvgComponent } from \"../assets/targets/grapes.svg\";\r\nimport { ReactComponent as LemonSvgComponent } from \"../assets/targets/lemon.svg\";\r\nimport { ReactComponent as MangoSvgComponent } from \"../assets/targets/mango.svg\";\r\nimport { ReactComponent as MelonSvgComponent } from \"../assets/targets/melon.svg\";\r\nimport { ReactComponent as OnionSvgComponent } from \"../assets/targets/onion.svg\";\r\nimport { ReactComponent as OrangeSvgComponent } from \"../assets/targets/orange.svg\";\r\nimport { ReactComponent as PearSvgComponent } from \"../assets/targets/pear.svg\";\r\nimport { ReactComponent as PeasSvgComponent } from \"../assets/targets/peas.svg\";\r\nimport { ReactComponent as PepperSvgComponent } from \"../assets/targets/pepper.svg\";\r\nimport { ReactComponent as PineappleSvgComponent } from \"../assets/targets/pineapple.svg\";\r\nimport { ReactComponent as PumpkinSvgComponent } from \"../assets/targets/pumpkin.svg\";\r\nimport { ReactComponent as RadishSvgComponent } from \"../assets/targets/radish.svg\";\r\nimport { ReactComponent as RaspberrySvgComponent } from \"../assets/targets/raspberry.svg\";\r\nimport { ReactComponent as StrawberrySvgComponent } from \"../assets/targets/strawberry.svg\";\r\nimport { ReactComponent as TomatoSvgComponent } from \"../assets/targets/tomato.svg\";\r\nimport { ReactComponent as WatermelonSvgComponent } from \"../assets/targets/watermelon.svg\";\r\n\r\n\r\nexport const TargetArea = () => {\r\n    const { setTargetDescription } = useContext(AppStorage);\r\n    const itemClassName = \"targetSvg\";\r\n    let initialArray: JSX.Element[] = [];\r\n    const [pickedItems, setPickedItems] = useState(initialArray);\r\n    \r\n    const itemComponents = [\r\n    <AppleSvgComponent className={itemClassName}/>,\r\n    <BananaSvgComponent className={itemClassName}/>,\r\n    <BeanSvgComponent className={itemClassName}/>,\r\n    <BeetSvgComponent className={itemClassName}/>,\r\n    <BlueberrySvgComponent className={itemClassName}/>,\r\n    <BroccoliSvgComponent className={itemClassName}/>,\r\n    <CabbageSvgComponent className={itemClassName}/>,\r\n    <CarrotSvgComponent className={itemClassName}/>,\r\n    <CherrySvgComponent className={itemClassName}/>,\r\n    <CoconutSvgComponent className={itemClassName}/>,\r\n    <CornSvgComponent className={itemClassName}/>,\r\n    <CucumberSvgComponent className={itemClassName}/>,\r\n    <EggplantSvgComponent className={itemClassName}/>,\r\n    <GarlicSvgComponent className={itemClassName}/>,\r\n    <GrapesSvgComponent className={itemClassName}/>,\r\n    <LemonSvgComponent className={itemClassName}/>,\r\n    <MangoSvgComponent className={itemClassName}/>,\r\n    <MelonSvgComponent className={itemClassName}/>,\r\n    <OnionSvgComponent className={itemClassName}/>,\r\n    <OrangeSvgComponent className={itemClassName}/>,\r\n    <PearSvgComponent className={itemClassName}/>,\r\n    <PeasSvgComponent className={itemClassName}/>,\r\n    <PepperSvgComponent className={itemClassName}/>,\r\n    <PineappleSvgComponent className={itemClassName}/>,\r\n    <PumpkinSvgComponent className={itemClassName}/>,\r\n    <RadishSvgComponent className={itemClassName}/>,\r\n    <RaspberrySvgComponent className={itemClassName}/>,\r\n    <StrawberrySvgComponent className={itemClassName}/>,\r\n    <TomatoSvgComponent className={itemClassName}/>,\r\n    <WatermelonSvgComponent className={itemClassName}/>,\r\n    ];\r\n\r\n    const targetClassNames = () => {\r\n        const colorOptions = [\"green\", \"blue\", \"red\", \"yellow\", \"brown\", \"white\", \"gray\"];\r\n        const baseClass = [\"target\"];\r\n        return `${baseClass[0]} ${colorOptions[Math.floor(Math.random() * colorOptions.length)]}`;\r\n    }\r\n    \r\n    const pickTargetDescription = (candidates: JSX.Element[]) => {\r\n        const randomNumber = Math.floor(Math.random() * candidates.length);\r\n        const propsObj = candidates[randomNumber].props;\r\n        // console.log(propsObj);   \r\n        //STRUCTURE OF PROPSOBJ: className: \"target blue\", data-name: \"watermelon\"\r\n        const color = String(Object.values(propsObj)[0]).slice(7);\r\n        const type = Object.values(propsObj)[1];\r\n        // console.log(color, type);\r\n        if (Math.random() >= 0.5) return type\r\n        return color\r\n    }\r\n    \r\n    const pickThreeItemComponents = () => { \r\n        let randomNumbers = [];\r\n        let pickedItemComponents: JSX.Element[] = [];\r\n        const i = Math.floor(Math.random() * itemComponents.length);\r\n        const j = Math.floor(Math.random() * itemComponents.length);\r\n        const k = Math.floor(Math.random() * itemComponents.length);\r\n        if (i !== j && j !==k && i !== k) {\r\n            randomNumbers = [i, j, k];\r\n        } else randomNumbers = [1, 2, 3];    \r\n        const positions = ['left', 'center', 'right'];\r\n        for (let x = 0; x<3; x++) {            \r\n            let randomNumber = randomNumbers[x];\r\n            pickedItemComponents.push(\r\n                <div ref={element => {showIt(element)}}\r\n                key = {targets[randomNumber].id}\r\n                className = {targetClassNames()}\r\n                data-name = {targets[randomNumber].name}\r\n                data-position = {positions[x]}>\r\n                {itemComponents[randomNumber]}\r\n                </div>\r\n            );\r\n        }\r\n        return pickedItemComponents;\r\n    }\r\n    \r\n    const showIt = (el:any) => {\r\n        if(!el) return\r\n        // console.log(el.dataset.name);\r\n    };\r\n\r\n    \r\n    let pickedTargetFeatureForDisplay: any = '';\r\n\r\n    const getNewTargets = () => {\r\n        const newTargets = pickThreeItemComponents();\r\n        setPickedItems(newTargets);\r\n        pickedTargetFeatureForDisplay = pickTargetDescription(newTargets);\r\n        setTargetDescription(pickedTargetFeatureForDisplay);\r\n    }\r\n        \r\n    useEffect(() => {\r\n        getNewTargets();\r\n        const targetsChangeInterval = setInterval(() => {\r\n            console.log('CLICK INTERVAL');\r\n            getNewTargets();\r\n        }, 4000);  \r\n\r\n        return () => {\r\n             clearInterval(targetsChangeInterval);\r\n          };        \r\n    }, []);    \r\n \r\n    return (\r\n    <section className = \"targetArea\" data-name = 'targetArea'>\r\n        {pickedItems}\r\n    </section>\r\n    )\r\n}\r\n","C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\assets\\targets\\_targetList.tsx",[],["54","55"],"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\SoundToggle.tsx",[],"C:\\Users\\Bartek\\Desktop\\MEDEVPROJECTS\\sheriff\\src\\components\\Intro.tsx",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":12,"column":12,"nodeType":"62","messageId":"63","endLine":12,"endColumn":29},{"ruleId":"64","severity":1,"message":"65","line":144,"column":8,"nodeType":"66","endLine":144,"endColumn":10,"suggestions":"67"},{"ruleId":"56","replacedBy":"68"},{"ruleId":"58","replacedBy":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'sheriffClickCount' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNewTargets'. Either include it or remove the dependency array.","ArrayExpression",["72"],["70"],["71"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [getNewTargets]",{"range":"75","text":"76"},[7376,7378],"[getNewTargets]"]